#What is Node.js:
    open source, cross platform runtime environment for development of server side and networming applications.
    javascript runtime environment.

#process.argv:
    it helps in taking input from the user. 
    first two arguments are:
            1) first is where is node present.
            2) which file i9s node running.
    acess other arguments like array.

#Modules:
    A module in JavaScript is just a file containing related code. 
        if you export functions by using module.exports.something in one file and want to use
        it in another file you have to require that file.

#Server:
     a server is a piece of computer hardware or software that provides
     functionality for other programs or devices, called "clients".

# creating our first server using node and npm 
    1) npm init
    2) using http package
    3) require http, assign port, run the server http.createServer(), then listen to print a response
       pass a function to createServer and res.end().
    4) fs to read and write file or render html file.
    5) render multiple file using switch case and fs.

# FrameWork
   A web development framework is a set of resources and tools for software developers
   to build and manage web applications, web services and websites. 

# Understanding MVC
    Model Veiw Controls
        browser request for some url for which it will go to the router, the specific router
        is map to the specific controller function, then for data it req model to fetch data from
        the db, then model give bsck data to the controller, and controleer then convert it into the html and
        return it to the browser.

# Why Express.js
    node js web application framework that provides broad features for building web and mobile applications.

#setting up contact list
    1) npm init
    2) npm i express
    3) require express, assign port, start express, then app.get to the url, then listen to the port.
    4) there are get,post,put,patch,delete type of requests.

    #Template Engine:

    Ejs:
        1) npm i ejs.
        2) required path, set the view engine, set the views folder path,render the ejs file.

    #creating temporaray storage using array

        1) create array of objects then passed it to the ejs file.
        2) rendered data inside the array using let of in ejs file.
        3) create a form in ejs file to add new contacts in the array.
        4) make a route to handle the data submitted via the form.
        5) now after the data is submitted via the form to the server side or to the action route, the data
           is encoded and to decode we need a parser, the data is received in the req of the route, then it is
           parsed and send it as response.
        6) now we use a middleware to parse the encoded data, express.urlencoded(), then we push thae data into
           the array. and redirct to the home page.
    
    #What is a middleware
        middleware is something which have acees to req and res of a request and can reprocess it and then
        can send it to his route.

    # acessing static files:
        to acess static files like css and js. we will use a middleware express.static(). and folder
        name as assests. as whenver there is a need of staic files. it will be found inside th assests folder.

    # how to delete a contact
        now to delete a contact we use params.
        we send phone number using params from the form to the route then find index and slice it and then return.
           
    #Dtabases
        A database is an organized collection of structured information, or data, typically stored
        electronically somwhere else and express interact with it.
        here we will interact with odm(object document mapper) and we need not learn mongod.
        odm is a layer written above mongodb by which we can interact with odm and odm intereact with mongodb.
        her odm is mongoose.

        #Steps:
            1) npm i mongoose.
            2) then make a folder named config and create a file inside it to establish a connection between
               the mongoose and the database.
            3) require it,make connection,acquire connection,check connection.
            4) require it in the main file.
            5) make a schema for our databse.
            6) require mongoose, make a schema, darz it inside a name , export, require it in the main file.
        
        # populate inside the db
            we need to use create method over the db to push data inside the db.
            we push it then we need a functin to check if it there is an error or not then redirect.

        # print the data inside the db
            find the contacts then an error function then pass it to the home file as locals.

        # deleting the data:
            take the id from the contact and delete by method and then redirect.

# made a todo app project named as major project.

# getting started with authentication

    # Manually:
        1) we need to create a user , so make user schema, we will also use timestamps this time
        which mean we wil get when user is created or updated at.
        2)sign in/ sign up page routes and all 
        3) creating forms on sign in and sign up pages.
        #cookies:
            a file that is stored by the browser, and set to the every request
            it is used for storing data, for later use, and establish user identity
        4) nedd a cookie-parser for reading and writing into the cookies.
        5) require it and then middleware it.
        6) now sign up creation: check password and confirm pass are same. then user.findone and create user
        7) sign in create session: find user, handle user find, handle session creation, handle user found.
        8) profile page. 

    # Using Library:
        1) npm i passport and npm i passport-local (for local autehntication of username and pass only)
        2) in config/passport-local-strategy.js 
        3) require passport,local strategy,user schema then authencate it then two serializer and deserealizer
           functions and then export it.
        4)  now we need to create session by setting up the cookies.
        5) we use library express-session
        6) in main file we require the express session, passport and passport-local, then a middleware
        to encrypt the cookie, the use the passport then set the cokkie into the folder.
        7) create two function in local-passport file to checkauth and set the user in locals
        8) use the function setauthenticatd user int he main file.
        9) we need to use mongo store to have session store in the database.
        10) require mongo store, and in the function for encrypting store mongoose connection, and a callback function
        11) to logout-> req.logout.
